2017-05-17  Thomas Schwinge  <thomas@codesourcery.com>

	* pt.c (tsubst_omp_clauses): Handle "OMP_CLAUSE_FINALIZE".

	* parser.c (cp_parser_oacc_data_clause)
	<PRAGMA_OACC_CLAUSE_DELETE>: Use "GOMP_MAP_RELEASE".

2017-05-16  Chung-Lin Tang  <cltang@codesourcery.com>

	* parser.c (cp_parser_omp_clause_name): Handle 'finalize' clause.
	(cp_parser_oacc_simple_clause): Add 'finalize' to comments.
	(cp_parser_oacc_all_clauses): Handle PRAGMA_OACC_CLAUSE_FINALIZE.
	(OACC_EXIT_DATA_CLAUSE_MASK): Add PRAGMA_OACC_CLAUSE_FINALIZE.
	* semantics.c (finish_omp_clauses): Handle OMP_CLAUSE_FINALIZE.

2017-05-14  Thomas Schwinge  <thomas@codesourcery.com>

	* parser.c (OACC_KERNELS_CLAUSE_MASK)
	(OACC_KERNELS_CLAUSE_DEVICE_TYPE_MASK): Add
	"PRAGMA_OACC_CLAUSE_NUM_GANGS", "PRAGMA_OACC_CLAUSE_NUM_WORKERS",
	"VECTOR_LENGTH".

2017-05-04  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_omp_clause_name): Add support for if_present.
	(cp_parser_oacc_all_clauses): Likewise.
	(cp_parser_oacc_kernels_parallel): Likewise.
	(OACC_UPDATE_CLAUSE_MASK): Add PRAGMA_OACC_CLAUSE_IF_PRESENT.
	* pt.c (tsubst_omp_clauses): Add support for if_present.
	* semantics.c (finish_omp_clauses): Likewise.

2017-05-01  Cesar Philippidis  <cesar@codesourcery.com>

	* semantics.c (finish_omp_clauses): Emit an error on orphan OpenACC
	gang reductions.

2017-04-26  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_omp_var_list_no_open): New c_omp_region_type
	argument.  Use it to specialize handling of OMP_CLAUSE_REDUCTION for
	OpenACC.
	(cp_parser_omp_clause_reduction): Update call to
	cp_parser_omp_variable_list.  Propage OpenACC errors as necessary.
	(cp_parser_oacc_all_clauses): Update call to
	cp_parser_omp_clause_reduction..
	(cp_parser_omp_all_clauses): Liekwise.
	(cp_parser_cilk_simd_all_clauses): Likewise.

2017-04-13  Chung-Lin Tang  <cltang@codesourcery.com>

	* parser.c (cp_parser_omp_clause_name): Remove occurences of
	PRAGMA_OACC_CLAUSE_PRESENT_OR_COPY/COPYIN/COPYOUT/CREATE, adjust
	them to non-PRESENT_OR values.
	(cp_parser_oacc_data_clause): Remove PRAGMA_OACC_CLAUSE_PRESENT_OR_*
	cases, remove FORCE from PRAGMA_OACC_CLAUSE_COPY/COPYIN/COPYOUT/CREATE
	kinds, update comment description.
	(cp_parser_oacc_all_clauses): Remove PRAGMA_OACC_CLAUSE_PRESENT_OR_*
	cases.
	(OACC_DATA_CLAUSE_MASK): Remove PRAGMA_OACC_CLAUSE_PRESENT_OR_*.
	(OACC_DECLARE_CLAUSE_MASK): Likewise.
	(cp_parser_oacc_declare): Remove GOMP_MAP_FORCE_ALLOC/TO, change to
	COMP_MAP_ALLOC/TO.
	(OACC_ENTER_DATA_CLAUSE_MASK): Remove PRAGMA_OACC_CLAUSE_PRESENT_OR_*.
	(OACC_KERNELS_CLAUSE_MASK): Likewise.
	(OACC_PARALLEL_CLAUSE_MASK): Likewise.

2017-04-07  Thomas Schwinge  <thomas@codesourcery.com>

	* parser.c (cp_parser_omp_clause_default): Handle
	"OMP_CLAUSE_DEFAULT_PRESENT".

2017-03-28  Thomas Schwinge  <thomas@codesourcery.com>

	* parser.c (cp_parser_omp_clause_default): Avoid printing more
	than one syntax error message.

2017-02-27  Chung-Lin Tang  <cltang@codesourcery.com>
	    Cesar Philippidis  <cesar@codesourcery.com>

	* cp-tree.h (mark_vars_oacc_gangprivate): Declare.
	* parser.c (mark_vars_oacc_gangprivate): New function.
	(cp_parser_oacc_kernels_parallel): Call it to mark gang local variables
	with attribute "oacc gangprivate".
	* pt.c (tsubst_expr): Likewise.

2017-02-22  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_oacc_kernels_parallel): Adjust EXPR_LOCATION
	on the combined acc loop.

2017-01-10  Chung-Lin Tang  <cltang@codesourcery.com>

	* semantics.c (handle_omp_array_sections_1): Add 'bool &non_contiguous'
	parameter, adjust recursive call site, add cases for allowing
	pointer based multi-dimensional arrays for OpenACC.
	(handle_omp_array_sections): Adjust handle_omp_array_sections_1 call,
	handle non-contiguous case to create dynamic array map.

2016-09-28  Nathan Sidwell  <nathan@codesourcery.com>

	* parser.c (cp_parser_omp_for_loop): Deal with tile clause.  Don't
	emit a parse error about missing for after already emitting
	one.  Use more conventional for idiom for unbounded loop.
	* semantics.c (finish_omp_for): Deal with tile clause.

2016-09-23  Nathan Sidwell  <nathan@codesourcery.com>

	* parser.c (cp_parser_oacc_clause_tile): Disallow collapse.  Fix
	parsing.  Parse constant expression. Remove semantic checking.
	(cp_parser_omp_clause_collapse): Disallow tile.
	* pt.c (tsubst_omp_clauses): Require integral constant expression
	for COLLAPSE and TILE.  Remove broken TILE subst.
	* semantics.c (finish_omp_clauses): Correct TILE semantic check.

2016-08-17  Thomas Schwinge  <thomas@codesourcery.com>

	* parser.c (cp_finalize_oacc_routine): Rework checking if already
	marked as an accelerator routine.

	* parser.c (cp_parser_oacc_routine)
	(cp_parser_late_parsing_oacc_routine): Normalize order of clauses.
	(cp_finalize_oacc_routine): Call verify_oacc_routine_clauses.

	* parser.c (cp_parser_oacc_shape_clause): Add loc formal
	parameter.  Adjust all users.

2016-08-04  Thomas Schwinge  <thomas@codesourcery.com>

	Backport trunk r239128:
	* parser.c (cp_ensure_no_oacc_routine): Improve diagnostics.
	(cp_parser_late_parsing_cilk_simd_fn_info): Fix diagnostics.
	(cp_parser_late_parsing_oacc_routine, cp_finalize_oacc_routine):
	Simplify code, and improve diagnostics.
	(cp_parser_oacc_routine): Likewise.  Move pragma context
	checking...
	(cp_parser_pragma): ... here.

	Backport trunk r239127:
	* parser.h (struct cp_omp_declare_simd_data): New.
	(struct cp_parser): Use it for oacc_routine member.
	* parser.c (cp_ensure_no_oacc_routine, cp_parser_oacc_routine)
	(cp_parser_late_parsing_oacc_routine, cp_finalize_oacc_routine):
	Use it.  Simplify code.
	(cp_parser_new): Initialize all members pointing to special
	parsing data structures.
	(cp_parser_cilk_simd_fn_vector_attrs): Initialize
	parser->cilk_simd_fn_info->clauses.
	(cp_parser_omp_declare_simd): Initialize
	parser->omp_declare_simd->clauses.
	(cp_parser_late_parsing_omp_declare_simd): Simplify code.

2016-07-15  Cesar Philippidis  <cesar@codesourcery.com>

	Backport from trunk:
	* parser.c (cp_parser_oacc_declare): Don't scan for
	GOMP_MAP_POINTER.
	* semantics.c (handle_omp_array_sections): Mark data clauses with
	GOMP_MAP_FORCE_{PRESENT,TO,FROM,TOFROM} as potentially having
	zero-length subarrays.

2016-06-10  Thomas Schwinge  <thomas@codesourcery.com>

	PR c/71381
	Backport from trunk r237290:
	* parser.c (cp_parser_omp_var_list_no_open) <OMP_CLAUSE__CACHE_>:
	Loosen checking.

2016-06-08  Chung-Lin Tang  <cltang@codesourcery.com>

	Backport trunk r237070:
	2016-06-03  Chung-Lin Tang  <cltang@codesourcery.com>

	* semantics.c (finish_omp_clauses): Mark OpenACC reduction
	arguments as addressable when async clause exists.

2016-05-27  Cesar Philippidis  <cesar@codesourcery.com>

	Backport trunk r236678:
	2016-05-24  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_oacc_declare): Add support for
	GOMP_MAP_FIRSTPRIVATE_POINTER.
	* semantics.c (handle_omp_array_sections_1): Replace bool is_omp
	argument with enum c_omp_region_type ort.  Don't privatize OpenACC
	non-static members.
	(handle_omp_array_sections): Replace bool is_omp argument with enum
	c_omp_region_type ort.  Update call to handle_omp_array_sections_1.
	(finish_omp_clauses): Add specific errors and warning messages for
	OpenACC.  Use firsrtprivate pointers for OpenACC subarrays.  Update
	call to handle_omp_array_sections.

2016-05-09  Cesar Philippidis  <cesar@codesourcery.com>

	Backport trunk r235651:
	2016-04-29  Cesar Philippidis  <cesar@codesourcery.com>

	PR middle-end/70626
	* parser.c (cp_parser_oacc_loop): Don't augment mask with
	OACC_LOOP_CLAUSE_MASK.
	(cp_parser_oacc_kernels_parallel): Update call to
	c_oacc_split_loop_clauses.

2016-05-09  Cesar Philippidis  <cesar@codesourcery.com>

	Backport from trunk r235780:
	2016-05-02  Cesar Philippidis  <cesar@codesourcery.com>

	* cp-tree.h (finish_omp_clauses): Update prototype.
	* parser.c (cp_parser_oacc_all_clauses): Update call to
	finish_omp_clauses.
	(cp_parser_omp_all_clauses): Likewise.
	(cp_parser_omp_for_loop): Likewise.
	(cp_omp_split_clauses): Likewise.
	(cp_parser_oacc_cache): Likewise.
	(cp_parser_oacc_loop): Likewise.
	(cp_parser_omp_declare_target):
	(cp_parser_cilk_simd_all_clauses): Likewise.
	(cp_parser_cilk_for): Likewise.
	* pt.c (tsubst_omp_clauses): Replace allow_fields and declare_simd
	arguments with enum c_omp_region_type ort.
	(tsubst_omp_clauses): Update calls to finish_omp_clauses.
	(tsubst_omp_attribute): Update calls to tsubst_omp_clauses.
	(tsubst_omp_for_iterator): Update calls to finish_omp_clauses.
	(tsubst_expr): Update calls to tsubst_omp_clauses.
	* semantics.c (finish_omp_clauses): Replace bool arguments
	allow_fields, declare_simd, and is_cilk with bitmask ort.
	(finish_omp_for): Update call to finish_omp_clauses.

2016-05-09  Cesar Philippidis  <cesar@codesourcery.com>

	Backport trunk r235290:
	2016-04-20  Ilya Verbin  <ilya.verbin@intel.com>

	PR c++/69363
	* cp-tree.h (finish_omp_clauses): Add new default argument.
	* parser.c (cp_parser_cilk_simd_all_clauses): Use finish_omp_clauses
	instead of c_finish_cilk_clauses.
	* semantics.c (finish_omp_clauses): Add new argument.  Allow
	floating-point variables in the linear clause for Cilk Plus.

2016-03-11  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_oacc_loop): Update cclauses and clauses
	when calling c_finish_omp_clauses.

2016-02-15  James Norris  <jnorris@codesourcery.com>

	Backport from trunk:
	PR c/64748
	* parser.c (cp_parser_oacc_data_clause_deviceptr): Remove checking.
	* semantics.c (finish_omp_clauses): Add deviceptr checking.

2016-02-03  James Norris  <jnorris@codesourcery.com>

	* semantics.c (finish_id_expression): Remove usage check.

2016-01-20  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_oacc_all_clauses): Call finish_omp_clauses
	with allow_fields set to true.
	(cp_parser_oacc_cache): Likewise.
	(cp_parser_oacc_loop): Likewise.
	* semantics.c (finish_omp_clauses): Ensure that is_oacc is properly
	set when calling hanlde_omp_array_sections.

2016-01-14  James Norris  <jnorris@codesourcery.com>

	* parser.c (cp_finalize_oacc_routine): Remove attribute.
	* semantics.c (finish_id_expression): Change usage check.

2016-01-07  James Norris  <jnorris@codesourcery.com>

	* parser.c (cp_finalize_oacc_routine): Add new attribute.
	* semantics.c (finish_id_expression): Add usage check.

2016-01-07  Cesar Philippidis  <cesar@codesourcery.com>

	* cp-tree.h (bind_decls_match): Declare.
	* decl.c (bind_decls_match): New function.
	* parser.c (cp_parser_oacc_clause_bind): Remove TODOs and useless
	namespace checks.  Defer string-ifying bind clauses with identifiers.
	Check for empty identifier strings.
    	(cp_parser_oacc_routine): Clean up the pragma parser after
	detecting a non-pragma_external context.  Remove useless namespace
	check.
	(cp_finalize_oacc_routine): Handle bind clauses with identifiers.

2015-12-08  Thomas Schwinge  <thomas@codesourcery.com>

	* parser.c (cp_ensure_no_oacc_routine, cp_parser_oacc_clause_bind)
	(cp_parser_oacc_routine, cp_parser_late_parsing_oacc_routine)
	(cp_finalize_oacc_routine): Update.
	* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_BIND,
	OMP_CLAUSE_NOHOST.

2015-11-12  Thomas Schwinge  <thomas@codesourcery.com>

	* semantics.c (finish_omp_clauses): Remove "reference types are
	not supported in OpenACC" diagnostic.

2015-11-12  Nathan Sidwell  <nathan@codesourcery.com>

	* semantics.c (finish_ommp_clauses): Adjust omp_mappable_type calls.
	* decl2.c (cp_omp_mappable_type): Remove oacc arg and processing.
	* cp-tree.h (cp_omp_mappable_type): Remove oacc arg.

2015-11-07  Thomas Schwinge  <thomas@codesourcery.com>

	* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_LINEAR.

2015-11-06  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_oacc_shape_clause): Allow pointers arguments to
	gang static.
	(cp_parser_oacc_clause_tile): Backport cleanups from trunnk.
	(cp_parser_omp_clause_default): Replace is_omp argument with is_oacc.
	(cp_parser_oacc_all_clauses): Likewise, update call to
	c_parser_omp_clause_{default,tile}.
	(cp_parser_omp_all_clauses): Update call to
	c_parser_omp_clause_default.
	(OACC_PARALLEL_CLAUSE_MASK): Remove PRAGMA_OACC_CLAUSE_GANG.
	* pt.c (tsubst_omp_clauses):
	* semantics.c (finish_omp_clauses):

2015-11-04  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_oacc_simple_clause): New function.
	(cp_parser_oacc_clause_vector_length): Delete.
	(cp_parser_omp_clause_num_gangs): Delete.
	(cp_parser_omp_clause_num_workers): Delete.
	(cp_parser_oacc_all_clauses): Use cp_parser_oacc_simple_clause for
	num_gangs, num_workers and vector_length.
	(cp_parser_oacc_update): Update the error message for missing
	clauses.

2015-10-29  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_omp_simple_clause): Rename to ...
	(cp_parser_oacc_simple_clause): ... this.
	(cp_parser_omp_clause_untied): Restore from trunk.
	(cp_parser_omp_clause_branch): Likewise.
	(cp_parser_oacc_all_clauses): Use cp_parser_oacc_simple_clause for
	OACC_CLAUSE_{AUTO,INDEPENDENT,NOHOST,NUM_GANGS,SEQ}.
	(cp_parser_omp_all_clauses): Use cp_parser_omp_clause_untied for
	OMP_CLAUSE_UNTIED, and cp_parser_omp_clause_branch for
	OMP_CLAUSE_{INBRANCH,NOTINBRANCH} and CICK_CLAUSE_{MASK,NOMASK}.

2015-10-29  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_omp_positive_int_clause): Delete.
	(cp_parser_oacc_clause_tile): Restore from trunk.
	(cp_parser_oacc_clause_vector_length): Likewise.
	(cp_parser_omp_clause_nowait): Likewise.
	(cp_parser_omp_clause_num_gangs): Likewise.
	(cp_parser_omp_clause_num_threads): Likewise.
	(cp_parser_omp_clause_num_workers): Likewise.
	(cp_parser_oacc_all_clauses): Use c_parser_omp_clause_{num_gangs,
	num_workers,vector_length} for OMP_CLAUSE_{NUM_GANGS,NUM_WORKERS,
	VECTOR_LENGTH}, respectively.
	(cp_parser_omp_all_clauses): Use cp_parser_omp_cluase_num_threads
	for OMP_CLAUSE_NUM_THREADS.

2015-10-28  Thomas Schwinge  <thomas@codesourcery.com>

	* parser.c (require_positive_expr): Remove function.

2015-10-27  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_oacc_shape_clause): Backport from trunk.
	(cp_parser_oacc_all_clauses): Likewise.
	* semantics.c (finish_omp_clauses): Likewise.

2015-09-01  Tom de Vries  <tom@codesourcery.com>

	* pt.c (tsubst_expr): Remove unused variable s.

2015-08-18  James Norris  <jnorris@codesourcery.com>

	* decl.c (check_oacc_vars_1, check_oacc_vars, struct oacc_return,
	find_oacc_return, finish_oacc_declare): Remove.
	(finish_function): Remove call.
	* parser.c (cp_parser_oacc_declare): Rewrite.
	* pt.c (tsubst_expr): Handle OACC_DECLARE:

2015-08-17  Nathan Sidwell  <nathan@codesourcery.com>

	* parser.c (cp_parser_finish_oacc_routine): Adjust to match
	errors from C FE.

2015-08-17  Nathan Sidwell  <nathan@codesourcery.com>

	* parser.h (struct cp_parser): Change oacc_routine field
	tree. Remove named_oacc_routines field.
	* parser.c (cp_ensure_no_omp_declare_simd): Remove oacc routine
	checking, move to ...
	(cp_ensure_no_oacc_routine): ... here.  New function, adjust all
	callers.
	(cp_parser_late_parsing_oacc_routine): Delete.
	(cp_parser_new): Adjust.
	(cp_parser_linkage_specification): Call cp_ensure_no_oacc_routine.
	(cp_finalize_oacc_routine): Reimplement.  Adjust all callers.
	(cp_parser_late_return_type_opt): Remove oacc routine handling.
	(cp_parser_omp_declare_simd): Remove oacc routine handling. Adjust
	callers.
	(cp_parser_finish_oacc_routine): New.
	(cp_parser_oacc_routine): Reimplement.

2015-08-15  Nathan Sidwell  <nathan@codesourcery.com>

	* parser.c (cp_parser_oacc_routine_check_parallelism): Delete.
	(cp_parser_oacc_routine): Don't check parallelism here.
	(cp_parser_late_parssing_oacc_routine): Use build_oacc_routine_dims.

2015-08-14  Cesar Philippidis  <cesar@codesourcery.com>

	* semantics.c (finish_omp_clauses): Permit variables to appear
	in both OpenACC data and reduction clauses.

2015-08-03  Nathan Sidwell  <nathan@codesourcery.com>

	* semantics.c (finish_omp_clauses): Remove OpenACC-specific
	firstprivate handling.
	* parser.c (cp_parser_oacc_data_clause): Remove firstprivate here.
	(cp_parser_oacc_all_clauses): First private is a firstprivate clause.

2015-07-31  James Norris  <jnorris@codesourcery.com>

	* decl.c (finish_oacc_declare): Remove argument, add constraint.
	(finish_function): Update finish_oacc_declare call.

2015-07-27  Julian Brown  <julian@codesourcery.com>

	* semantics.c (finish_omp_clauses): Likewise.

2015-07-17  Julian Brown  <julian@codesourcery.com>

	* parser.c (cp_parser_oacc_all_clauses): Don't call
	c_oacc_filter_device_types.
	* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_DEVICE_TYPE.
	* semantics.c (finish_omp_clauses): Likewise.

2015-07-07  Thomas Schwinge  <thomas@codesourcery.com>

	* parser.c (OACC_LOOP_CLAUSE_DEVICE_TYPE_MASK): Remove
	PRAGMA_OACC_CLAUSE_INDEPENDENT.

2015-06-15  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_oacc_all_clauses): Call
	c_oacc_filter_device_types instead of oacc_filter_device_types.
	(oacc_split_loop_clauses): Remove.
	(cp_parser_oacc_loop): Call c_oacc_split_loop_clauses
	instead of oacc_split_loop_clauses.

2015-06-12  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_oacc_clause_device_type): Switch
	OMP_CLAUSE_DEVICE_TYPE_DEVICES to tree instead of an int.

2015-06-10  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.h: Remove oacc_parallel_region and oacc_kernels_region.
	* parser.c (cp_parser_oacc_shape_clause): Don't check for
	parallel-specific clauses here.
	(cp_parser_oacc_loop): Don't check for incompatible clauses.
	(cp_parser_oacc_parallel_kernels): Don't check for nested parallelism.

2015-06-10  Joseph Myers  <joseph@codesourcery.com>

	* parser.c (cp_parser_omp_var_list_no_open): Handle RID_THIS.
	* typeck.c (cxx_mark_addressable): Add argument ALLOW_THIS.
	* cp-tree.h (cxx_mark_addressable): Update prototype.
	* semantics.c (handle_omp_array_sections)
	(finish_omp_reduction_clause, finish_omp_clauses): Pass ALLOW_THIS
	to cxx_mark_addressable.

2015-06-08  James Norris  <jnorris@codesourcery.com>

	* decl.c (gomp-constants.h): Add inclusion.
	(check_oacc_vars1, check_oacc_vsars, find_oacc_return,
	finish_oacc_declare): New functions.
	(finish_function): Add call to finish_oacc_declare.
	* parser.c (tree-iterator.h): Add inclusion.
	(oacc_dcl_idx): New variable.
	(OACC_DECLARE_CLAUSE_MASK): New macro.
	(cp_parser_oacc_declare): New function.
	(cp_parser_pragma): Handle parsing of declare directive.
	* pt.c (tsubr_expr): Add handling of declare directive.

2015-05-15  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.h (typedef struct cp_parser): Add bool oacc_parallel_region
	and oacc_kernels_region.
	* parser.c (cp_parser_oacc_shape_clause): Only use op1 for the static
	argument in the gang clause. Check for incompatible clause arguments
	inside parallel regions.
	(cp_parser_oacc_loop): Error on conflicting loop clauses.
	(cp_parser_oacc_parallel_kernels): Error in nested parallel and
	kernels.

2015-05-13  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_late_parsing_oacc_routine): Add an
	"oacc function" attribute to routines.

	* cp-tree.h (cp_omp_mappable_type): Add bool parameter.
	* decl2.c (cp_check_const_attributes): Likewise. Use it.
	(cp_omp_mappable_type): Update call to cp_omp_mappable_type.
	(cplus_decl_attributes): Likewise.
	* semantics.c (finish_omp_clauses): Likewise.

2015-05-13  Thomas Schwinge  <thomas@codesourcery.com>
	    Bernd Schmidt  <bernds@codesourcery.com>
	    Cesar Philippidis  <cesar@codesourcery.com>
	    Chung-Lin Tang  <cltang@codesourcery.com>
	    James Norris  <jnorris@codesourcery.com>
	    Joseph Myers  <joseph@codesourcery.com>
	    Julian Brown  <julian@codesourcery.com>
	    Tom de Vries  <tom@codesourcery.com>

	* parser.c (cp_parser_oacc_data_clause)
	(cp_parser_oacc_all_clauses, oacc_split_loop_clauses)
	(cp_parser_oacc_parallel): Handle PRAGMA_OACC_CLAUSE_FIRSTPRIVATE.
	* semantics.c (finish_omp_clauses): Add error checking for
	GOMP_MAP_FORCE_TO_GANGLOCAL.

2015-05-11  Thomas Schwinge  <thomas@codesourcery.com>
	    Bernd Schmidt  <bernds@codesourcery.com>
	    Cesar Philippidis  <cesar@codesourcery.com>
	    Chung-Lin Tang  <cltang@codesourcery.com>
	    James Norris  <jnorris@codesourcery.com>
	    Joseph Myers  <joseph@codesourcery.com>
	    Julian Brown  <julian@codesourcery.com>
	    Tom de Vries  <tom@codesourcery.com>

	* cp-gimplify.c (cxx_omp_clause_copy_ctor): Handle OMP_CLAUSE_MAP.
	* cp-tree.h (finish_oacc_host_data): New prototype.
	* parser.h (cp_parser): Add oacc_routine, named_oacc_routines
	members.
	* parser.c (cp_parser_new): Initialize them.
	(cp_ensure_no_omp_declare_simd, cp_parser_init_declarator)
	(cp_parser_late_return_type_opt, cp_parser_member_declaration)
	(cp_parser_function_definition_from_specifiers_and_declarator)
	(cp_parser_save_member_function_body, cp_parser_omp_declare_simd)
	(cp_parser_omp_declare, cp_parser_pragma): Extend for OpenACC routines.
	(cp_finalize_oacc_routine)
	(cp_parser_oacc_routine_check_parallelism, cp_parser_oacc_routine)
	(cp_parser_late_parsing_oacc_routine): New functions.
	(cp_parser_omp_clause_name): Add consume_token formal parameter.
	Handle "auto", "bind", "device_resident", "device_type", "dtype",
	"gang", "independent", "link", "nohost", "seq", "tile",
	"use_device", "vector", "worker".
	(cp_parser_oacc_data_clause): Handle
	PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT, PRAGMA_OACC_CLAUSE_LINK.
	Don't handle PRAGMA_OACC_CLAUSE_SELF.
	(cp_parser_oacc_clause_vector_length)
	(cp_parser_omp_clause_num_gangs, cp_parser_omp_clause_num_threads)
	(cp_parser_omp_clause_num_workers): Replace functions by...
	(require_positive_expr, cp_parser_omp_positive_int_clause):
	... these new functions.  Adjust all users.
	(cp_parser_oacc_shape_clause, cp_parser_oacc_clause_device_type)
	(cp_parser_oacc_clause_tile, cp_parser_oacc_clause_bind): New
	functions.
	(cp_parser_oacc_wait_list): Change an error message.
	(cp_parser_omp_clause_default): Add is_omp formal parameter.
	(cp_parser_omp_clause_untied, cp_parser_omp_clause_branch):
	Replace functions by...
	(cp_parser_omp_simple_clause): ... this new function.  Adjust all
	users.
	(cp_parser_oacc_all_clauses): Add dtype_mask, and scan_dtype
	formal parameters.  Adjust all users.  Handle
	PRAGMA_OACC_CLAUSE_AUTO, PRAGMA_OACC_CLAUSE_BIND,
	PRAGMA_OMP_CLAUSE_DEFAULT, PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT,
	PRAGMA_OACC_CLAUSE_DEVICE_TYPE, PRAGMA_OACC_CLAUSE_GANG,
	PRAGMA_OACC_CLAUSE_INDEPENDENT, PRAGMA_OACC_CLAUSE_LINK,
	PRAGMA_OACC_CLAUSE_NOHOST, PRAGMA_OACC_CLAUSE_PRIVATE,
	PRAGMA_OACC_CLAUSE_SEQ, PRAGMA_OACC_CLAUSE_TILE,
	PRAGMA_OACC_CLAUSE_USE_DEVICE, PRAGMA_OACC_CLAUSE_VECTOR,
	PRAGMA_OACC_CLAUSE_WORKER.  Don't handle PRAGMA_OACC_CLAUSE_SELF.
	(cp_parser_oacc_host_data, oacc_split_loop_clauses):
	(cp_parser_oacc_enter_exit_data): Change error reporting.
	(cp_parser_oacc_loop): Add p_name, mask, and cclauses formal
	parameters.  Handle PRAGMA_OACC_CLAUSE_DEVICE_TYPE,
	PRAGMA_OACC_CLAUSE_GANG, PRAGMA_OACC_CLAUSE_PRIVATE
	PRAGMA_OACC_CLAUSE_VECTOR, PRAGMA_OACC_CLAUSE_WORKER,
	PRAGMA_OACC_CLAUSE_AUTO, PRAGMA_OACC_CLAUSE_INDEPENDENT,
	PRAGMA_OACC_CLAUSE_SEQ, PRAGMA_OACC_CLAUSE_TILE.  Support combined
	directives.
	(cp_parser_oacc_kernels, cp_parser_oacc_parallel): Replace
	functions by...
	(cp_parser_oacc_parallel_kernels): ... this new function.  Adjust
	all users.  Support combined directives.  For "kernels", handle
	PRAGMA_OACC_CLAUSE_DEFAULT, PRAGMA_OACC_CLAUSE_DEVICE_TYPE.  For
	"parallel", handle PRAGMA_OACC_CLAUSE_DEFAULT,
	PRAGMA_OACC_CLAUSE_DEVICE_TYPE, PRAGMA_OACC_CLAUSE_GANG,
	PRAGMA_OACC_CLAUSE_PRIVATE.
	(cp_parser_oacc_update): Handle PRAGMA_OACC_CLAUSE_DEVICE_TYPE.
	Don't handle PRAGMA_OACC_CLAUSE_SELF.
	(cp_parser_omp_construct): Handle PRAGMA_OACC_ATOMIC,
	PRAGMA_OACC_HOST_DATA.
	(cp_parser_pragma): Handle PRAGMA_OACC_ATOMIC,
	PRAGMA_OACC_HOST_DATA, PRAGMA_OACC_ROUTINE.  Add pragma context
	checking for PRAGMA_OACC_ENTER_DATA, PRAGMA_OACC_EXIT_DATA,
	PRAGMA_OACC_UPDATE, PRAGMA_OACC_WAIT.
	* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_NUM_GANGS,
	OMP_CLAUSE_NUM_WORKERS, OMP_CLAUSE_VECTOR_LENGTH, OMP_CLAUSE_GANG,
	OMP_CLAUSE_WORKER, OMP_CLAUSE_VECTOR, OMP_CLAUSE_ASYNC,
	OMP_CLAUSE_WAIT, OMP_CLAUSE_INDEPENDENT, OMP_CLAUSE_AUTO,
	OMP_CLAUSE_SEQ, OMP_CLAUSE_TILE.
	(tsubst_expr): Handle OACC_PARALLEL, OACC_KERNELS, OACC_LOOP,
	OACC_DATA, OACC_ENTER_DATA, OACC_EXIT_DATA, OACC_UPDATE.
	* semantics.c (finish_omp_clauses): Add oacc formal parameter.
	Adjust all users.  Handle OMP_CLAUSE_GANG, OMP_CLAUSE_VECTOR,
	OMP_CLAUSE_WORKER, OMP_CLAUSE_NUM_GANGS, OMP_CLAUSE_NUM_WORKERS,
	OMP_CLAUSE_USE_DEVICE, OMP_CLAUSE_AUTO, OMP_CLAUSE_INDEPENDENT,
	OMP_CLAUSE_SEQ, OMP_CLAUSE_BIND, OMP_CLAUSE_NOHOST,
	OMP_CLAUSE_TILE.
	(finish_oacc_host_data): New function.

2015-01-13  Thomas Schwinge  <thomas@codesourcery.com>

	* parser.c (cp_parser_oacc_data_clause)
	(cp_parser_oacc_data_clause_deviceptr, cp_parser_omp_clause_map):
	Use OMP_CLAUSE_SET_MAP_KIND.
	* semantics.c (handle_omp_array_sections): Likewise.

2014-12-19  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_name): Use PRAGMA_OACC_CLAUSE_*
	for OpenACC only clauses.
	(cp_parser_oacc_data_clause, cp_parser_oacc_data_clause_deviceptr,
	cp_parser_oacc_all_clauses): Use PRAGMA_OACC_CLAUSE_* instead of
	PRAGMA_OMP_CLAUSE_*.
	(OACC_DATA_CLAUSE_MASK, OACC_KERNELS_CLAUSE_MASK,
	OACC_ENTER_DATA_CLAUSE_MASK, OACC_EXIT_DATA_CLAUSE_MASK,
	OACC_LOOP_CLAUSE_MASK, OACC_PARALLEL_CLAUSE_MASK,
	OACC_UPDATE_CLAUSE_MASK, OACC_WAIT_CLAUSE_MASK): Likewise.

2014-12-17  James Norris  <jnorris@codesourcery.com>

	* parser.c (cp_parser_oacc_clause_vector_length)
	(cp_parser_oacc_wait_list, cp_parser_omp_clause_num_gangs)
	(cp_parser_omp_clause_num_workers): Revise parsing.

2014-12-17  Thomas Schwinge  <thomas@codesourcery.com>

	* parser.c (cp_parser_oacc_clause_async): Use
	include/gomp-constants.h.

2014-11-05  Thomas Schwinge  <thomas@codesourcery.com>

	* parser.c (cp_parser_oacc_data_clause): Group
	PRAGMA_OMP_CLAUSE_SELF next to PRAGMA_OMP_CLAUSE_HOST.

	* parser.c (cp_parser_oacc_cache): Generate OACC_CACHE.
	* semantics.c (finish_omp_clauses): Handle OMP_CLAUSE__CACHE_.

	* parser.c (cp_parser_omp_var_list_no_open) <OMP_CLAUSE__CACHE_>:
	Remove explicit mark_exp_read invocations.

	* parser.c (cp_parser_omp_clause_name): Also look for "pcopy",
	"pcopyin", "pcopyout", "pcreate".  Look for "wait" instead of
	"WAIT".

2014-11-03  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_omp_clause_name): Also consider CPP_KEYWORD
	typed tokens as clauses for delete.
	(OACC_ENTER_DATA_CLAUSE_MASK): New macro.
	(OACC_EXIT_DATA_CLAUSE_MASK): New macro.
	(cp_parser_oacc_enter_exit_data): New function.
	(cp_parser_omp_construct): Handle PRAGMA_OACC_ENTER_DATA and
	PRAGMA_OACC_EXIT_DATA.
	(cp_parser_pragma): Likewise.

2014-10-21  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_omp_clause_name): Don't parse the
	identifier for RID_DELETE.

2014-10-20  Cesar Philippidis  <cesar@codesourcery.com>

	* parser.c (cp_parser_omp_clause_name): Consider CPP_KEYWORD
	typed tokens as clauses for delete.

2014-10-15  James Norris  <jnorris@codesourcery.com>
	    Cesar Philippidis  <cesar@codesourcery.com>
	    Ilmir Usmanov  <i.usmanov@samsung.com>

	* cp-tree.h (finish_oacc_data, finish_oacc_kernels,
	finish_oacc_parallel): New prototypes.
	* parser.c (cp_parser_omp_clause_name): Add parsing of OpenACC clauses.
	(cp_parser_omp_var_list_no_open): Add handling of array specifier.
	(cp_parser_oacc_data_clause, cp_parser_oacc_data_clause_deviceptr,
	cp_parser_oacc_vector_length, cp_parser_oacc_wait_list,
	cp_parser_oacc_clause_wait, cp_parser_omp_clause_num_gangs,
	cp_parser_omp_clause_num_workers): New functions.
	* semantics.c (finish_omp_clauses): Handle OMP_CLAUSE_ASYNC,
	OMP_CLAUSE_VECTOR_LENGTH, OMP_CLAUSE_WAIT.
	(finish_oacc_data, finish_oacc_kernels, finish_oacc_parallel): New
	functions.

2013-11-21  Jakub Jelinek  <jakub@redhat.com>

	* semantics.c (finish_omp_clauses): Use maybe_constant_value on
	OMP_CLAUSE_LINEAR in #pragma omp declare simd.

2013-11-07  Thomas Schwinge  <thomas@codesourcery.com>

	* parser.c (cp_parser_omp_all_clauses): Make a parser error
	message suitable for OpenACC, too.

2013-10-10  Jakub Jelinek  <jakub@redhat.com>

	* decl.c (grokfndecl): If omp declare simd has any clauses,
	store them into TREE_VALUE of an extra TREE_LIST pointed out
	by TREE_VALUE of the attribute.
	* pt.c (apply_late_template_attributes): Likewise.
	* parser.c (cp_parser_late_parsing_omp_declare_simd): Likewise.
	(cp_parser_omp_declare_target, cp_parser_omp_end_declare_target):
	Use scope_chain->omp_declare_target_attribute instead of
	current_omp_declare_target_attribute.
	* cp-tree.h (struct saved_scope): Add omp_declare_target_attribute
	field.
	(current_omp_declare_target_attribute): Remove.
	* cp-gimplify.c (cp_genericize_r) <case OMP_CLAUSE_REDUCTION>: Add
	comment.
	* decl2.c (current_omp_declare_target_attribute): Remove.
	(is_late_template_attribute): Fix up comment about "omp declare simd"
	attribute.
	(cp_check_const_attributes): Don't expect TREE_VALUEs other
	than NULL_TREE or TREE_LIST.
	(cplus_decl_attributes): Use scope_chain->omp_declare_target_attribute
	instead of current_omp_declare_target_attribute.  Use
	DECL_CLASS_SCOPE_P and DECL_FUNCTION_SCOPE_P macros.
	* semantics.c (handle_omp_array_sections_1): Change wording
	of errors requesting specification of length.
	(finish_omp_reduction_clause): Static cast omp_{out,in,priv,orig}
	to reference type and convert_from_reference, instead of
	taking address, static cast to pointer type and INDIRECT_REF.
	(finish_omp_clauses): For error about non-integral non-pointer
	linear clause include type in the diagnostic message.

	* decl.c (decls_match): Revert DECL_OMP_DECLARE_REDUCTION_P
	special cases.
	(duplicate_decls): Move DECL_OMP_DECLARE_REDUCTION_P case
	earlier.
	* parser.c (cp_parser_omp_declare_reduction): Fix spelling
	of some error messages.  Set DECL_CONTEXT (fndecl) to
	global_namespace first.
	* decl2.c (mark_used): Force immediate instantiation of
	DECL_OMP_DECLARE_REDUCTION_P decls.
	* semantics.c (omp_reduction_lookup): Add baselinkp and
	ambiguousp arguments, diagnose ambiguities, perform access
	check only if non-ambiguous.
	(finish_omp_reduction_clause): Adjust omp_reduction_lookup
	caller, if it returned error_mark_node, just return true,
	use mark_used instead of instantiate_decl.

2013-10-08  Jakub Jelinek  <jakub@redhat.com>

	* semantics.c (finish_omp_clauses): Remove name variable, use
	omp_clause_code_name[OMP_CLAUSE_CODE (c) instead.

2013-10-07  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_declare_reduction_exprs): Document the
	statements in the artificial function body of UDRs.
	* pt.c (tsubst_expr): Use DECL_FUNCTION_SCOPE_P macro for UDRs.
	(tsubst_omp_udr): Refer to cp_parser_omp_declare_reduction_exprs
	in function comment.
	(finish_omp_reduction_clause): New function.
	(finish_omp_clauses): Use it.
	* cp-gimplify.c (cxx_omp_privatize_by_reference): Fix up formatting.

	* parser.c (cp_parser_omp_declare_reduction): Use different wording
	of error message between function/method/array type and reference type.
	Include %qT in the type related error messages.
	* semantics.c (cp_check_omp_declare_reduction): Likewise.
	* pt.c (tsubst_decl): Use reference type specific wording of error
	message.  Include %qT in the type related error messages.

2013-09-25  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_taskgroup): Return tree.  Use
	c_finish_omp_taskgroup.
	(cp_parser_omp_construct): Adjust caller.
	* cp-array-notation.c (expand_array_notation_exprs): Handle
	OMP_TASKGROUP.
	* pt.c (tsubst_expr): Handle OMP_TASKGROUP.
	* semantics.c (finish_omp_taskgroup): Remove.
	* cp-tree.h (finish_omp_taskgroup): Remove.

2013-09-18  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (lang_decl_fn): Add omp_declare_reduction_p bitfield.
	(DECL_OMP_DECLARE_REDUCTION_P): Define.
	(omp_reduction_id, cp_remove_omp_priv_cleanup_stmt,
	cp_check_omp_declare_reduction): New prototypes.
	(cxx_omp_create_clause_info): Add another bool argument.
	* decl.c (decls_match): For DECL_OMP_DECLARE_REDUCTION_P decls,
	ignore template and context mismatches.
	(duplicate_decls): Error out for redeclaration of UDRs.
	* parser.c (cp_parser_class_specifier_1): Handle UDRs before all
	other function bodies.
	(cp_parser_late_parsing_for_member): Handle UDRs.
	(cp_parser_omp_clause_reduction): Handle UDRs.
	(cp_parser_omp_declare_reduction_exprs,
	cp_parser_omp_declare_reduction): New functions.
	(cp_parser_omp_declare): Uncomment parsing of UDRs.
	(cp_debug_parser): Print colon_doesnt_start_class_def_p.
	(cp_parser_next_token_starts_class_definition_p): Don't allow
	CPP_COLON if colon_doesnt_start_class_def_p flag is true.
	* parser.h (struct cp_parser): Add colon_doesnt_start_class_def_p
	field.
	* pt.c (instantiate_class_template_1): Call
	cp_check_omp_declare_reduction on UDRs.
	(tsubst_decl): Diagnose UDRs on reference types.
	(tsubst_omp_clauses): Subst OMP_CLAUSE_REDUCTION_PLACEHOLDER
	if needed.
	(tsubst_expr): Handle UDRs.
	(tsubst_omp_udr): New function.
	(instantiate_decl): Handle UDRs.
	* cp-gimplify.c (cp_genericize_r): Handle invisiref parm decls
	in OMP_CLAUSE_REDUCTION.
	(cxx_omp_privatize_by_reference): Return true also for decls with
	REFERENCE_TYPE.
	(cxx_omp_finish_clause): Adjust cxx_omp_create_clause_info caller.
	* semantics.c (cxx_omp_create_clause_info): Add need_dtor argument.
	Use it instead of need_default_ctor || need_copy_ctor for dtor
	info setup.
	(omp_reduction_id, omp_reduction_lookup,
	cp_remove_omp_priv_cleanup_stmt, cp_check_omp_declare_reduction_r,
	cp_check_omp_declare_reduction, clone_omp_udr,
	find_omp_placeholder_r): New functions.
	(struct cp_check_omp_declare_reduction_data): New type.
	(finish_omp_clauses): Adjust cxx_omp_create_clause_info caller.
	Handle UDRs.  Handle decls with REFERENCE_TYPE type.

2013-09-05  Jakub Jelinek  <jakub@redhat.com>

	* semantics.c (handle_omp_array_sections): Fix up handling
	of reference to array and reference to pointer based array
	sections.
	(finish_omp_clauses): Don't report errors about non-decl
	in OMP_CLAUSE_DECL for OMP_CLAUSE_MAP_POINTER.

	* parser.c (cp_parser_omp_target_data, cp_parser_omp_target): Call
	keep_next_level (true).
	* cp-objcp-common.h (LANG_HOOKS_OMP_MAPPABLE_TYPE): Define.
	* semantics.c (handle_omp_array_sections_1): Remove pointer_based_p
	argument.  Do cp_save_expr on low bound unconditionally.
	(handle_omp_array_sections): Adjust caller.  Add OMP_CLAUSE_MAP_POINTER
	map clause even for array based array sections.
	(finish_omp_clauses): Don't complain about non-mappable types
	for OMP_CLAUSE_MAP_POINTER.  Check for duplicates even for map
	clauses.

2013-07-14  Jakub Jelinek  <jakub@redhat.com>

	* decl.c (declare_simd_adjust_this): New function.
	(grokfndecl): Remove omp_declare_simd_clauses argument.
	Don't call finish_omp_declare_simd, instead just call
	c_omp_declare_simd_clauses_to_numbers.
	(grokdeclarator): Don't pass omp_declare_simd_clauses to
	grokfndecl.
	* parser.c (cp_ensure_no_omp_declare_simd): Adjust for
	change from omp_declare_simd_clauses vector to omp_declare_simd
	pointer.
	(cp_finish_omp_declare_simd): Renamed to...
	(cp_finalize_omp_declare_simd): ... this.  Adjust for
	change from omp_declare_simd_clauses vector to omp_declare_simd
	pointer, remove declspecs argument.
	(cp_parser_init_declarator, cp_parser_member_declaration,
	cp_parser_function_definition_from_specifiers_and_declarator,
	cp_parser_save_member_function_body): Don't copy
	omp_declare_simd_clauses vector to declspecs.  Call
	cp_finalize_omp_declare_simd instead of cp_finish_omp_declare_simd.
	(cp_parser_late_return_type_opt): Add declarator argument.  On
	cdk_id declarator call cp_parser_late_parsing_omp_declare_simd
	if declare simd pragma has been seen.
	(cp_parser_direct_declarator): Adjust cp_parser_late_return_type_opt
	caller.
	(cp_parser_omp_var_list_no_open): Don't special-case lookup in
	omp declare simd clauses.
	(OMP_DECLARE_SIMD_CLAUSE_MASK): Remove OMP_CLAUSE_REDUCTION.
	(cp_parser_omp_declare_simd): Don't set up omp_declare_simd_clauses
	vector, don't parse omp clauses here.  Instead remember tokens
	from #pragma omp declare simd till end of pragma line and populate
	omp_declare_simd_data structure.
	(cp_parser_late_parsing_omp_declare_simd): New function.
	* pt.c (apply_late_template_attributes): Adjust
	c_omp_declare_simd_clauses_to_numbers caller.
	* cp-tree.h (struct cp_decl_specifier_seq): Remove
	omp_declare_simd_clauses field.
	(finish_omp_declare_simd): Remove.
	* parser.h (cp_omp_declare_simd_data): New structure.
	(struct cp_parser): Remove omp_declare_simd_clauses field,
	add omp_declare_simd field instead.
	* semantics.c (finish_omp_declare_simd): Remove.

2013-07-09  Jakub Jelinek  <jakub@redhat.com>

	* semantics.c (finish_omp_cancel): Pass two arguments to GOMP_cancel
	rather than just one, if no OMP_CLAUSE_IF, pass true, otherwise pass
	if clause argument.  Emit the call unconditionally.

2013-07-06  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_end_declare_target): Diagnose if
	#pragma omp end isn't followed by declare target.
	(cp_parser_omp_declare): Adjust expected keyword diagnostics.

2013-07-03  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_atomic): Disallow seq_cst before
	atomic-clause, disallow comma in between atomic-clause and
	seq_cst.
	(cp_parser_omp_sections_scope): If section-sequence doesn't
	start with #pragma omp section, require exactly one structured-block
	instead of sequence of statements.
	* semantics.c (finish_omp_clauses): Diagnose copyprivate clause
	appearing together with nowait clause.

2013-06-21  Jakub Jelinek  <jakub@redhat.com>

	* decl2.c (cplus_decl_attributes): Only add attribute
	to TREE_STATIC vars.
	* parser.c (cp_parser_omp_distribute): Don't reject
	#pragma omp teams distribute simd and
	#pragma omp target teams distribute simd.  Consume
	simd or parallel token.

2013-06-14  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_all_clauses): Add defaulted finish_p
	argument.  Don't call finish_omp_clauses if it is false.
	(cp_parser_omp_for_loop): Change last argument to cclauses,
	and adjust uses to grab parallel clauses from the array of all
	the split clauses.
	(cp_omp_split_clauses): New function.
	(cp_parser_omp_simd): Add p_name, mask and cclauses arguments.
	Allow the function to be called also when parsing combined constructs.
	(cp_parser_omp_sections): Likewise.
	(cp_parser_omp_for): Add p_name, mask and cclauses arguments.
	Allow the function to be called also when parsing combined constructs,
	and call cp_parser_omp_simd when parsing for simd.
	(cp_parser_omp_parallel): Likewise.
	(cp_parser_omp_distribute): Likewise.
	(cp_parser_omp_teams): Likewise.
	(cp_parser_omp_target): If next token is teams, call
	cp_parser_omp_teams and parse it as combined construct.
	(cp_parser_omp_declare_simd): Pass false as last argument to
	cp_parser_omp_all_clauses.
	(cp_parser_omp_construct): Adjust callers of cp_parser_omp_simd,
	cp_parser_omp_sections, cp_parser_omp_for, cp_parser_omp_parallel,
	cp_parser_omp_distribute and cp_parser_omp_teams.
	* pt.c (tsubst_expr): Don't handle OMP_FOR_SIMD.  Handle NULL
	OMP_FOR_INIT.
	* semantics.c (finish_omp_for): Don't handle OMP_FOR_SIMD.
	* cp-tree.h (OMP_FOR_GIMPLIFYING_P): Adjust comment.
	* cp-gimplify.c (cp_gimplify_expr, cp_genericize_r): Don't handle
	OMP_FOR_SIMD.
	
	* decl2.c (cp_omp_mappable_type): No longer static.  Handle array
	types and recurse for FIELD_DECL types.
	* semantics.c (handle_omp_array_sections_1): Call
	convert_from_reference before testing for pointer_based_p.
	(finish_omp_clauses): Complain if OMP_CLAUSE_{MAP,TO,FROM}
	decls or array sections don't have cp_omp_mappable_type.
	* cp-tree.h (cp_omp_mappable_type): New prototype.

2013-06-12  Jakub Jelinek  <jakub@redhat.com>

	* semantics.c (finish_omp_clause): Don't mark references addressable.
	For OMP_CLAUSE_{TO,FROM} detect same decl appearing more than once
	in motion clauses.
	* parser.c (cp_parser_omp_var_list_no_open): Handle [ expression ]
	notation in array section specification.
	(cp_parser_omp_all_clauses): Don't require to/from clauses to be
	first.
	(cp_parser_omp_target_update): Adjust diagnostics.

	* semantics.c (finish_omp_clauses): Handle OMP_CLAUSE_THREAD_LIMIT.
	* parser.c (cp_parser_omp_clause_name): Handle thread_limit clause.
	(cp_parser_omp_clause_thread_limit): New function.
	(cp_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_THREAD_LIMIT.
	(OMP_TEAMS_CLAUSE_MASK): Replace PRAGMA_OMP_CLAUSE_NUM_THREADS
	with PRAGMA_OMP_CLAUSE_THREAD_LIMIT.
	* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_THREAD_LIMIT.

2013-06-04  Jakub Jelinek  <jakub@redhat.com>

	* semantics.c (handle_omp_array_sections_1, handle_omp_array_sections):
	New functions.
	(finish_omp_clauses): Handle array sections on
	OMP_CLAUSE_{MAP,TO,FROM,DEPEND}.  If not array sections, mark the decl
	addressable.
	* parser.c (cp_parser_omp_var_list_no_open): Parse array sections
	on OMP_CLAUSE_{MAP,TO,FROM,DEPEND} clauses.

2013-05-29  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_declare_target,
	cp_parser_omp_end_declare_target): New functions.
	(cp_parser_omp_declare): For target keyword call
	cp_parser_omp_declare_target.
	(cp_parser_pragma): Handle PRAGMA_OMP_END_DECLARE_TARGET.
	* cp-tree.h (current_omp_declare_target_attribute): Declare.
	* decl2.c (current_omp_declare_target_attribute): New variable.
	(cp_omp_mappable_type): New function.
	(cplus_decl_attributes): Handle addition of "omp declare target"
	attribute for decls in #pragma omp declare target region.  Complain
	for invalid uses.

2013-05-27  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_cancelkind): Remove diagnostics.
	(cp_parser_omp_all_clauses): Require that OMP_CLAUSE_{TO,FROM}
	and OMP_CLAUSE_{PARALLEL,FOR,SECTIONS,TASKGROUP} must be first in
	the list of clauses.
	(OMP_TEAMS_CLAUSE_MASK, OMP_TARGET_CLAUSE_MASK,
	OMP_TARGET_DATA_CLAUSE_MASK, OMP_TARGET_UPDATE_CLAUSE_MASK,
	OMP_DISTRIBUTE_CLAUSE_MASK): Define.
	(cp_parser_omp_teams, cp_parser_omp_target, cp_parser_omp_target_data,
	cp_parser_omp_target_update, cp_parser_omp_distribute): New functions.
	(cp_parser_omp_construct): Handle PRAGMA_OMP_DISTRIBUTE and
	PRAGMA_OMP_TEAMS.
	(cp_parser_pragma): Handle PRAGMA_OMP_DISTRIBUTE, PRAGMA_OMP_TEAMS
	and PRAGMA_OMP_TARGET.
	* pt.c (tsubst_expr): Handle OMP_TEAMS, OMP_TARGET, OMP_TARGET_DATA
	and OMP_TARGET_UPDATE.

2013-05-09  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (cp_decl_specifier_seq): Add omp_declare_simd_clauses
	field.
	(finish_omp_declare_simd): Declare.
	* decl2.c (is_late_template_attribute): Return true for
	"omp declare simd" attribute.
	(cp_check_const_attributes): Don't check TREE_VALUE of arg if
	arg isn't a TREE_LIST.
	* decl.c (grokfndecl): Add omp_declare_simd_clauses argument, call
	finish_omp_declare_simd if non-NULL.
	(grokdeclarator): Pass it declspecs->omp_declare_simd_clauses
	to grokfndecl.
	* pt.c (apply_late_template_attributes): Handle "omp declare simd"
	attribute specially.
	(tsubst_omp_clauses): Add declare_simd argument, don't call
	finish_omp_clauses if it is set.  Handle OpenMP 4.0 clauses.
	(tsubst_expr): Adjust tsubst_omp_clauses callers.
	* semantics.c (finish_omp_clauses): Diagnose inbranch notinbranch.
	(finish_omp_declare_simd): New function.
	* parser.h (struct cp_parser): Add omp_declare_simd_clauses field.
	* parser.c (cp_ensure_no_omp_declare_simd,
	cp_finish_omp_declare_simd): New functions.
	(enum pragma_context): Add pragma_member and pragma_objc_icode.
	(cp_parser_linkage_specification, cp_parser_namespace_definition,
	cp_parser_class_specifier_1): Call cp_ensure_no_omp_declare_simd.
	(cp_parser_init_declarator, cp_parser_member_declaration,
	cp_parser_function_definition_from_specifiers_and_declarator,
	cp_parser_save_member_function_body): Copy
	parser->omp_declare_simd_clauses to
	decl_specifiers->omp_declare_simd_clauses, call
	cp_finish_omp_declare_simd.
	(cp_parser_member_specification_opt): Pass pragma_member instead
	of pragma_external to cp_parser_pragma.
	(cp_parser_objc_interstitial_code): Pass pragma_objc_icode instead
	of pragma_external to cp_parser_pragma.
	(cp_parser_omp_var_list_no_open): If parser->omp_declare_simd_clauses,
	just cp_parser_identifier the argument names.
	(cp_parser_omp_all_clauses): Don't call finish_omp_clauses for
	parser->omp_declare_simd_clauses.
	(OMP_DECLARE_SIMD_CLAUSE_MASK): Define.
	(cp_parser_omp_declare_simd, cp_parser_omp_declare): New functions.
	(cp_parser_pragma): Call cp_ensure_no_omp_declare_simd.  Handle
	PRAGMA_OMP_DECLARE_REDUCTION.  Replace == pragma_external with
	!= pragma_stmt and != pragma_compound.

2013-04-30  Jakub Jelinek  <jakub@redhat.com>

	* pt.c (tsubst_expr): Pass OMP_ATOMIC_SEQ_CST to finish_omp_atomic.
	* semantics.c (finish_omp_atomic): Add seq_cst argument, pass
	it through to c_finish_omp_atomic or store into OMP_ATOMIC_SEQ_CST.
	* cp-tree.h (finish_omp_atomic): Adjust prototype.
	* parser.c (cp_parser_omp_atomic): Parse seq_cst clause, pass
	true if it is present to finish_omp_atomic.

2013-04-24  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_clause_name): Add missing break after
	case 'i'.
	(cp_parser_omp_cancellation_point): Diagnose error if
	#pragma omp cancellation isn't followed by point.
	* semantics.c (finish_omp_clauses): Complain also about zero
	in alignment of aligned directive or safelen/simdlen expressions.
	(finish_omp_cancel): Fix up diagnostics wording.

2013-04-23  Jakub Jelinek  <jakub@redhat.com>

	* semantics.c (finish_omp_clauses): On OMP_CLAUSE_LINEAR clauses
	verify OMP_CLAUSE_DECL has integral or pointer type, and handle
	linear steps for pointer type decls.  FIx up handling of
	OMP_CLAUSE_UNIFORM.

2013-04-19  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (CP_OMP_CLAUSE_INFO): Also allow it on OMP_CLAUSE_LINEAR.
	* parser.c (cp_parser_omp_var_list_no_open): If colon is non-NULL,
	temporarily disable colon_corrects_to_scope_p during the parsing
	of the variable list.
	(cp_parser_omp_clause_safelen, cp_parser_omp_clause_simdlen): New
	functions.
	(cp_parser_omp_all_clauses): Handle OMP_CLAUSE_SAFELEN and
	OMP_CLAUSE_SIMDLEN.
	* semantics.c (finish_omp_clauses): Allow NULL_TREE in
	OMP_CLAUSE_ALIGNED_ALIGNMENT.

2013-04-10  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (finish_omp_taskgroup): New prototype.
	* parser.c (cp_parser_omp_clause_proc_bind): Require ) instead of
	colon at the end of the clause.
	(cp_parser_omp_taskgroup): New function.
	(cp_parser_omp_construct, cp_parser_pragma): Handle
	PRAGMA_OMP_TASKGROUP.
	* semantics.c (finish_omp_taskgroup): New function.

2013-04-05  Jakub Jelinek  <jakub@redhat.com>

	* semantics.c (finish_omp_for): Disallow class iterators for
	OMP_SIMD and OMP_FOR_SIMD loops.

2013-03-27  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (OMP_FOR_GIMPLIFYING_P): Use OMP_LOOP_CHECK instead of
	OMP_FOR_CHECK.
	(finish_omp_for): Add enum tree_code second argument.
	(finish_omp_cancel, finish_omp_cancellation_point): New prototypes.
	* cp-gimplify.c (cp_gimplify_expr, cp_genericize_r): Handle
	OMP_SIMD, OMP_FOR_SIMD and OMP_DISTRIBUTE.
	* semantics.c (finish_omp_clauses): Handle new OpenMP 4.0 clauses.
	(finish_omp_for): Add code argument, pass it down to make_node
	or c_finish_omp_for.
	(finish_omp_cancel, finish_omp_cancellation_point): New functions.
	* parser.c (cp_parser_omp_clause_name): Add parsing of new
	OpenMP 4.0 clauses.
	(cp_parser_omp_var_list_no_open): Add COLON argument, if non-NULL,
	accept termination by colon instead of closing paren.
	(cp_parser_omp_var_list, cp_parser_omp_clause_reduction): Adjust
	callers.
	(cp_parser_omp_clause_branch, cp_parser_omp_clause_cancelkind,
	cp_parser_omp_clause_num_teams, cp_parser_omp_clause_aligned,
	cp_parser_omp_clause_linear, cp_parser_omp_clause_depend,
	cp_parser_omp_clause_map, cp_parser_omp_clause_device,
	cp_parser_omp_clause_dist_schedule, cp_parser_omp_clause_proc_bind):
	New functions.
	(cp_parser_omp_all_clauses): Change mask argument's type to
	omp_clause_mask from unsigned.  Fix c_name for
	PRAGMA_OMP_CLAUSE_UNTIED.  Handle new OpenMP 4.0 clauses.
	(cp_parser_omp_for_loop): Add code argument.  Pass it down to
	finish_omp_for.
	(OMP_SIMD_CLAUSE_MASK): Define.
	(cp_parser_omp_simd): New function.
	(OMP_FOR_CLAUSE_MASK, OMP_SECTIONS_CLAUSE_MASK,
	OMP_PARALLEL_CLAUSE_MASK, OMP_SINGLE_CLAUSE_MASK,
	OMP_TASK_CLAUSE_MASK): Use OMP_CLAUSE_MASK_1 instead of 1.
	(cp_parser_omp_for): Handle parsing of #pragma omp for simd.
	(cp_parser_omp_parallel): Handle parsing of
	#pragma omp parallel for simd.  Use omp_clause_mask type
	instead of unsigned for mask, use OMP_CLAUSE_MASK_1 instead
	of 1 for masks.
	(OMP_CANCEL_CLAUSE_MASK, OMP_CANCELLATION_POINT_CLAUSE_MASK): Define.
	(cp_parser_omp_cancel, cp_parser_omp_cancellation_point): New
	functions.
	(cp_parser_omp_construct): Handle PRAGMA_OMP_SIMD, PRAGMA_OMP_CANCEL
	and PRAGMA_OMP_CANCELLATION_POINT.
	(cp_parser_pragma): Handle PRAGMA_OMP_SIMD.
	* pt.c (tsubst_expr): Handle OMP_SIMD, OMP_FOR_SIMD and
	OMP_DISTRIBUTE.  Pass down TREE_CODE to finish_omp_for.

2013-03-20  Jakub Jelinek  <jakub@redhat.com>

	* parser.c (cp_parser_omp_atomic): Never restart unless
	structured_block is true.

	* parser.c (cp_parser_binary_expression): Handle no_toplevel_fold_p
	even for binary operations other than comparison.
	(cp_parser_omp_atomic): Handle parsing OpenMP 4.0 atomics.
	* pt.c (tsubst_expr) <case OMP_ATOMIC>: Handle atomic exchange.
	* semantics.c (finish_omp_atomic): Use cp_tree_equal to diagnose
	expression mismatches and to find out if c_finish_omp_atomic
	should be called with swapped set to true or false.

Copyright (C) 2013-2016 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Local Variables:
mode: change-log
change-log-default-name: "ChangeLog.gomp"
End:
